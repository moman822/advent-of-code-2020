params = "country=Afghanistan"
)
req <- httr::GET(
url = "https://eiti.org/api/v1.0/summary_data",
add_headers(
`Content-Type` = "application/json"
),
params = "country=Afghanistan"
)
content(req, as = 'text')
req <- httr::GET(
url = "https://eiti.org/api/v1.0/summary_data",
add_headers(
`Content-Type` = "application/json"
),
params = "country='Afghanistan'"
)
content(req, as = 'text')
req <- httr::GET(
url = "https://eiti.org/api/v1.0/summary_data",
add_headers(
`Content-Type` = "application/json"
)
)
content(req, as = 'text')
head(content(req, as = 'text'))
z <- RJSON::fromJSON("https://eiti.org/api/v1.0/summary_data?page=2")
z <- fromJSON("https://eiti.org/api/v1.0/summary_data?page=2")
data.table(
country = z[[1]]$country$label,
year = as.numeric(substr(z[[1]]$year_end, 9, 20)),
id = z[[1]]$id
)
z <- fromJSON("https://eiti.org/api/v1.0/summary_data?page=20")
data.table(
country = z[[1]]$country$label,
year = as.numeric(substr(z[[1]]$year_end, 9, 20)),
id = z[[1]]$id
)
z <- fromJSON("https://eiti.org/api/v1.0/summary_data?page=3")
data.table(
country = z[[1]]$country$label,
year = as.numeric(substr(z[[1]]$year_end, 9, 20)),
id = z[[1]]$id
)
data.table(
country = z[[1]]$country$label,
year = as.numeric(substr(z[[1]]$year_end, 9, 20)),
id = z[[1]]$id
)
data.table(
country = z[[1]]$country$label,
year = z[[1]]$year_end,
id = z[[1]]$id
)
z <- fromJSON("https://eiti.org/api/v1.0/summary_data?page=15")
data.table(
country = z[[1]]$country$label,
year = z[[1]]$year_end,
id = z[[1]]$id
)
z <- fromJSON("https://eiti.org/api/v1.0/summary_data?page=12")
data.table(
country = z[[1]]$country$label,
year = z[[1]]$year_end,
id = z[[1]]$id
)
z <- fromJSON("https://eiti.org/api/v1.0/summary_data?page=10")
data.table(
country = z[[1]]$country$label,
year = z[[1]]$year_end,
id = z[[1]]$id
)
l <- list()
for(i in 1:10){
z <- fromJSON(paste0("https://eiti.org/api/v1.0/summary_data?page=", i))
l[[i]] <- data.table(
country = z[[1]]$country$label,
year = z[[1]]$year_end,
id = z[[1]]$id
)
print(i)
}
dat <- rbindlist(l)
View(dat)
?as.Date
lubridate::year(dat$year)
dat$year
dat$year[1]
as.Date(dat$year, format = "%b %d, %Y")
dat$year <- as.Date(dat$year, format = "%b %d, %Y")
lubridate::year(dat$year)
dat <- rbindlist(l)
dat$date <- as.Date(dat$year, format = "%b %d, %Y")
dat$year <- lubridate::year(dat$year)
dat$year <- lubridate::year(dat$date)
View(dat)
paste(dat$country, dat$year)
x[paste(country, year) %in% paste(dat$country, dat$year)]
dat[paste(country, year) %in% paste(x$country, x$year)]
z[[1]]$revenue_government
View(x)
rm(list=ls())
library(data.table); library(readxl)
l <- list()
for(i in 0:8) {
print(i)
temp <- tempfile("file", fileext = ".tsv")
download.file(paste0("https://www.imf.org/external/pubs/ft/weo/201",i,"/01/weodata/WEOApr201",i,"all.xls"), temp)
temp2 <- gsub("TMORRI~1", "TMORRISON", temp)
z <- read.delim(temp2)
file.remove(temp2)
setDT(z)
z[, vintage:=2010+i]
l[[i+1]] <- z
}; rm(temp, temp2, i)
x <- rbindlist(l, fill=TRUE, id=FALSE)
x[x=="n/a"] <- NA
dat <- melt(x, measure.vars = paste0("X", 1980:2023), variable.name = "year", value.name = "value")
dat[, year:=as.numeric(gsub("X", "", year))][, value:=gsub(",", "", value)]
dat[, value:=as.numeric(value)]
dat <- dat[, lapply(.SD, as.character), by=.(Estimates.Start.After, year, value, vintage)]
#Remove certain columns from dataset
dat <- dat[, -c("Estimates.Start.After", "Subject.Notes", "Country.Series.specific.Notes","WEO.Country.Code")]
dt <- copy(dat)
dt <- dat[year>=vintage]
dt <- unique(rbind(dt, dat[vintage==2018]))
samp <- merge(
dat[year==vintage-1, -'value'],
dat[vintage==2018, -'vintage'],
by=c('year','WEO.Subject.Code','ISO',"Subject.Descriptor","Units","Scale","Country")
)
dt <- rbind(samp, dt)
View(dat)
dat[!is.na(value)]
rp <- nrgiR::get_rp_website(DT=T)
rm(dt,dat,l,samp,x,z)
rp$project[, sum(projectPayment), by=reportYear]
options(scipen=999)
rp$project[, sum(projectPayment)/1000000000, by=reportYear]
rp$project[, uniqueN(paste(projectCountry, projectName)), by=reportYear]
2432000+2413000
(2432000+2413000)*
4845000/.96
(4845000/.96)-4845000
rm(rp)
1781*2
55000/26
2115-1781
334/2115
64000/26
2461*.16
2461 - 393
2068
2068*2
4136
4136
1781*2
1/.69
sum(c(31,29,31)
sum(c(31,29,31))
sum(c(31,29,31))
sum(c(31,29,31,30,31,30,31,31,30,31,30,7))
sum(c((0.687565 * 31),
(0.666854 * 29),
(0.621566 * 31),
(0.628652 * 30),
(0.650739 * 31),
(0.688715 * 30),
(0.701750 * 31),
(0.719619 * 31),
(0.723144 * 30),
(0.713224 * 31),
(0.726879 * 30),
(0.740685 * 7 )))
sum(c((0.687565 * 31),
(0.666854 * 29),
(0.621566 * 31),
(0.628652 * 30),
(0.650739 * 31),
(0.688715 * 30),
(0.701750 * 31),
(0.719619 * 31),
(0.723144 * 30),
(0.713224 * 31),
(0.726879 * 30),
(0.740685 * 7 )))/ sum(c(31,29,31,30,31,30,31,31,30,31,30,7))
1/.69
700/700000
rm(rp)
setwd("~/GitHub/advent-of-code-2020/")
read.table("data/day_5_1")
dat <- read.table("data/day_5_1")
str(dat)
View(dat)
names(dat) <- "pass"
setDT(dat)
library(data.table)
setDT(dat)
nchar(dat$pass)
dat[, row:=substr(pass, 1, 7)][, seat:=substr(pass, 8, 10)]
dat
dat <- read.table("data/day_5_1")
names(dat) <- "pass"
setDT(dat)
dat[, row_key:=substr(pass, 1, 7)][, seat_key:=substr(pass, 8, 10)]
dat
key <- dat[1]$pass
key <- dat[1]$row_key
key
v <- strsplit(key, "")[[1]]
v
init <- 64
init
init <- 1:64
ini
init
init[init/2:max(init)]
(init/2):max(init)
max(init)
max(init)/2:max(init)
(max(init)/2):max(init)
init
min(init)
min(init):(max(init)/2)
get_row <- function(key){
v <- strsplit(key, "")[[1]]
init <- 1:64
for(i in 1:length(v)){
if(v[i]=="F"){
init <- min(init):(max(init)/2)
} else if(v[i]=="B"){
init <- (max(init)/2):max(init)
}
print(init)
}
init
}
get_row("FBFBBFF")
get_row <- function(key){
v <- strsplit(key, "")[[1]]
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- min(init):(max(init)/2)
} else if(v[i]=="B"){
init <- (max(init)/2):max(init)
}
print(init)
}
init
}
get_row("FBFBBFF")
get_row <- function(key){
v <- strsplit(key, "")[[1]]
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- min(init):(max(init)/2)
} else if(v[i]=="B"){
init <- (max(init)/2):max(init)
}
# print(init)
}
init
}
get_row("FBFBBFF")
key <- "FBFBBFF"
v <- strsplit(key, "")[[1]]
v
i <- 1
init <- 1:128
init
v[i]
for(i in 1:length(v)){
if(v[i]=="F"){
init <- min(init):(max(init)/2)
} else if(v[i]=="B"){
init <- (max(init)/2):max(init)
}
print(length(init))
}
i
i <- 1
init <- 1:128
v
min(init):(max(init)/2)
init <- min(init):(max(init)/2)
(max(init)/2):max(init)
length((max(init)/2):max(init))
get_row <- function(key){
v <- strsplit(key, "")[[1]]
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- min(init):(max(init)/2)
} else if(v[i]=="B"){
init <- (max(init)/2)+1:max(init)
}
print(length(init))
}
init
}
get_row("FBFBBFF")
v <- strsplit(key, "")[[1]]
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- min(init):(max(init)/2)
} else if(v[i]=="B"){
init <- (max(init)/2)+1:max(init)
}
print(length(init))
}
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- min(init):(max(init)/2)
} else if(v[i]=="B"){
init <- (max(init)/2)+1:max(init)
}
print(length(init))
}
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- min(init):(max(init)/2)
} else if(v[i]=="B"){
init <- ((max(init)/2)+1):max(init)
}
print(length(init))
}
i
i <- 1
i
v
init
init <- 1:128
init
v
init <- min(init):(max(init)/2)
init
init <- ((max(init)/2)+1):max(init)
init
min(init):(max(init)/2)
max(init)/2
get_row <- function(key){
v <- strsplit(key, "")[[1]]
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- init[1:(length(init)/2)]
} else if(v[i]=="B"){
init <- init[((length(init)/2)+1):length(init)]
# init <- ((max(init)/2)+1):max(init)
}
print(length(init))
}
init
}
get_row("FBFBBFF")
get_row <- function(key){
v <- strsplit(key, "")[[1]]
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- init[1:(length(init)/2)]
} else if(v[i]=="B"){
init <- init[((length(init)/2)+1):length(init)]
# init <- ((max(init)/2)+1):max(init)
}
print(length(init))
}
init - 1
}
get_row("FBFBBFF")
get_seat <- function(key){
v <- strsplit(key, "")[[1]]
init <- 1:8
for(i in 1:length(v)){
if(v[i]=="L"){
init <- init[1:(length(init)/2)]
} else if(v[i]=="R"){
init <- init[((length(init)/2)+1):length(init)]
}
}
init - 1
}
get_seat("RLR")
get_seat(dat$row_key)
Vectorize(get_row)
z <- Vectorize(get_row)
z(dat$row_key)
x <- z(dat$row_key)
x
z <- Vectorize(get_row, USE.NAMES = F)
# make functions
get_row <-Vectorize(function(key){
v <- strsplit(key, "")[[1]]
init <- 1:128
for(i in 1:length(v)){
if(v[i]=="F"){
init <- init[1:(length(init)/2)]
} else if(v[i]=="B"){
init <- init[((length(init)/2)+1):length(init)]
}
}
init - 1
}, USE.NAMES = F)
get_seat <- Vectorize(function(key){
v <- strsplit(key, "")[[1]]
init <- 1:8
for(i in 1:length(v)){
if(v[i]=="L"){
init <- init[1:(length(init)/2)]
} else if(v[i]=="R"){
init <- init[((length(init)/2)+1):length(init)]
}
}
init - 1
}, USE.NAMES = F)
dat$row <- get_row(dat$row_key)
dat$seat <- get_seat(dat$seat_key)
dat
dat[, seat_id:=(row*8)+seat]
dat
max(dat$seat_id)
print(paste0("A: ", max(dat$seat_id)))
128*8
128*8
# Minimum ID:
0*8+0
View(dat)
# find the missing seat
dat[, missing:=seat_id-shift(seat_id, type='lag')]
View(dat)
# find the missing seat
dat[order(seat_id), missing:=seat_id-shift(seat_id, type='lag')]
dat
dat[missing!=1]
dat[missing!=1]
dat[missing!=1, seat_id-1]
rm(list=ls())
# a roundabout way of getting this data into a matrix, surely...
text <- readLines(con = "data/day_3_1")
cols <- nchar(text)
chars <- unlist(strsplit(text, ""))
x <- matrix(chars, ncol=cols, byrow = T)
lines <- trimws(strsplit(text, "\n")[[1]])
cols = nchar(lines)
cols
lines
x
# a roundabout way of getting this data into a matrix, surely...
text <- readLines(con = "data/day_3_1")
cols <- nchar(text)
chars <- unlist(strsplit(text, ""))
x <- matrix(chars, ncol=cols, byrow = T)
# paste a bunch together
x2 <- cbind(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x)
x2
right <- 3
down <- 1
start_row <- 1
start_col <- 1
i <- 1
n_trees <- 0
while(i<=nrow(x2)){
print(i)
val <- x2[start_row, start_col]
if(val=="#"){
n_trees <- n_trees + 1
}
start_row <- start_row + down
start_col <- start_col + right
i <- i + down
print(i)
}
print(paste0("Number of trees hit: ", n_trees))
rm(right, down, start_row, start_col, i, n_trees)
moves <- data.table(
right = c(1,3,5,7,1),
down =  c(1,1,1,1,2)
)
max(moves$right) * nrow(x)
ncol(x2)
x3 <- cbind(x2, x2)
n_trees_overall <- list()
for(j in 1:nrow(moves)){
down <- moves[j]$down
right <- moves[j]$right
start_row <- 1
start_col <- 1
i <- 1
n_trees <- 0
while(i<=nrow(x3)){
val <- x3[start_row, start_col]
if(val=="#"){
n_trees <- n_trees + 1
}
start_row <- start_row + down
start_col <- start_col + right
i <- i + down
print(start_col)
print(i)
}
n_trees_overall[[j]] <- n_trees
print(j)
}
unlist(n_trees_overall)
prod(unlist(n_trees_overall))
rm(list=ls())
